#!/usr/bin/env sh

{{ansible_managed|comment(decoration='#')}}

# SHELL VARIABLES

SHELL='/bin/sh'
PATH='/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin'

# COMMANDS

which='/usr/bin/which' && [ -x ${which} ] || { echo "Error: Command 'which' not found."; exit 127; }
awk=$(${which} awk) || { echo "Error: Command 'awk' not found."; exit 127; }
basename=$(${which} basename) || { echo "Error: Command 'basename' not found."; exit 127; }
date=$(${which} date) || { echo "Error: Command 'date' not found."; exit 127; }
echo=$(${which} echo) || { echo "Error: Command 'echo' not found."; exit 127; }
expr=$(${which} expr) || { echo "Error: Command 'expr' not found."; exit 127; }
grep=$(${which} grep) || { echo "Error: Command 'grep' not found."; exit 127; }
hostname=$(${which} hostname) || { echo "Error: Command 'hostname' not found."; exit 127; }
logger=$(${which} logger) || { echo "Error: Command 'logger' not found."; exit 127; }
{% if (openntpd_monitor_mail_state is match('true|yes|enable')) %}
mailx=$(${which} mailx) || { echo "Error: Command 'mailx' not found."; exit 127; }
{% endif %}
ntpctl=$(${which} ntpctl) || { echo "Error: Command 'ntpctl' not found."; exit 127; }
rm=$(${which} rm) || { echo "Error: Command 'rm' not found."; exit 127; }
sed=$(${which} sed) || { echo "Error: Command 'sed' not found."; exit 127; }
sleep=$(${which} sleep) || { echo "Error: Command 'sleep' not found."; exit 127; }
touch=$(${which} touch) || { echo "Error: Command 'touch' not found."; exit 127; }
whoami=$(${which} whoami) || { echo "Error: Command 'whoami' not found."; exit 127; }

# VARIABLES

host=$(${hostname} -s) || { echo "Error: Host name unknown."; exit 68; }
script="$(${basename} $0)[$$]" || { echo "Error: Command invoked cannot execute."; exit 126; }
time_start=$(${date} '+%s')
user='{{file_owner_openntpd_check_time}}'
lockfile='/var/tmp/openntpd_check-time.lock'
retval=0
severity='Debug'
message='Please check log files for more information.'

offset_limit='{{openntpd_check_time_offset_limit}}'
textfile_collector='{{openntpd_monitor_prom_textfile_collector}}'

{% if (openntpd_monitor_mail_state is match('true|yes|enable')) %}
mail_from_address='{{openntpd_monitor_mail_from_address}}'
mail_to_address='{% for item in openntpd_monitor_mail_to_address %}{{item}}{% if not loop.last %},{% endif %}{% endfor %}'
mail_subject='openntpd: Check Time - Error ({{ansible_hostname}})'
{% endif %}

# FUNCTIONS

{% if (openntpd_monitor_mail_state is match('true|yes|enable')) %}
mail_error() {
  retval="$1"
  severity="$2"
  message="$3"
  mail_body="ERROR

Message     : ${message}
Severity    : ${severity}
Date & Time : $(${date} '+%Y-%m-%dT%H:%M:%S%z')

SCRIPT

Name        : openntpd_check-time
Type        : Shell script
PID         : $$

SYSTEM

Hostname    : {{ansible_hostname}}
FQDN        : {{ansible_fqdn}}"

{% if (ansible_os_family == 'FreeBSD') %}
  ${echo} "${mail_body}" | ${mailx} -s "${mail_subject}" -F "${mail_to_address}" > /dev/null 2>&1
{% else %}
  ${echo} "${mail_body}" | ${mailx} -r "${mail_from_address}" -s "${mail_subject}" "${mail_to_address}" > /dev/null 2>&1
{% endif %}
}
{% endif %}

{% if (openntpd_monitor_prom_state is match('true|yes|enable')) %}
update_prom() {
  retval="$1"
  time_start="$2"
  time_exec="$3"

  if [ -w "${textfile_collector}" ]; then
    ${echo} "# HELP openntpd_check_time_exit The script's exit code.
# TYPE openntpd_check_time_exit counter
openntpd_check_time_exit ${retval}" > "${textfile_collector}/openntpd_check_time_exit.prom"

    if [ -z "${time_start}" ] ; then
      ${rm} -f "${textfile_collector}/openntpd_check_time_start.prom"
    else
      ${echo} "# HELP openntpd_check_time_start The script's start time in epoch.
# TYPE openntpd_check_time_start counter
openntpd_check_time_start ${time_start}" > "${textfile_collector}/openntpd_check_time_start.prom"
    fi

    if [ -z "${time_exec}" ] ; then
      ${rm} -f "${textfile_collector}/openntpd_check_time_duration.prom"
    else
      ${echo} "# HELP openntpd_check_time_duration The script's execution duration in seconds.
# TYPE openntpd_check_time_duration counter
openntpd_check_time_duration ${time_exec}" > "${textfile_collector}/openntpd_check_time_duration.prom"
    fi

    if [ -z "${offset_raw}" ] ; then
      ${rm} -f "${textfile_collector}/openntpd_check_time_offset.prom"
    else
      ${echo} "# HELP openntpd_check_time_offset The system time offset in milliseconds.
# TYPE openntpd_check_time_offset counter
openntpd_check_time_offset{limit=\"${offset_limit}\"} ${offset_raw}" > "${textfile_collector}/openntpd_check_time_offset.prom"
    fi
  fi
}
{% endif %}

check_script_user() {
  if [ "$(${whoami})" != "${user}" ]; then
    retval=77
    severity='Error'
    message="Please run script as user '${user}'"
    ${echo} "$(${date} '+%Y-%m-%dT%H:%M:%S%z') - ${host} - ${script}: ${severity}: ${message}"
    exit "${retval}"
  fi
}

create_lockfile() {
  if [ ! -e "${lockfile}" ]; then
    ${touch} "${lockfile}" || log_and_exit_on_error "$?" 'Warning' 'Could not create lockfile. Please investigate.'
  else
    log_and_exit_on_error "$?" 'Warning' 'Lockfile does already exist. Please investigate.'
  fi
}

remove_lockfile() {
  if [ -e "${lockfile}" ]; then
    ${rm} -f "${lockfile}" || log_and_exit_on_error "$?" 'Warning' 'Could not remove lockfile. Please investigate.'
  else
    log_and_exit_on_error "$?" 'Warning' 'Lockfile did not exist. Please investigate.'
  fi
}

log_and_exit_on_error() {
  retval="$1"
  severity="$2"
  message="$3"
  if [ "${retval}" -ne 0 ]; then
    ${rm} -f "${lockfile}"
    if [ -t 1 ] ; then
      ${echo} "$(${date} '+%Y-%m-%dT%H:%M:%S%z') - ${host} - ${script}: ${severity}: ${message}"
    fi
    ${logger} -t "${script}" "${severity}: ${message}"
{% if (openntpd_monitor_mail_state is match('true|yes|enable')) %}
    mail_error "${retval}" "${severity}" "${message}"
{% endif %}

{% if (openntpd_monitor_prom_state is match('true|yes|enable')) %}
    update_prom "${retval}" "${time_start}" "${time_exec}"
{% endif %}

    exit "${retval}"
  fi
}

log_and_exit() {
  time_end=$(${date} '+%s')
  time_exec=$(${expr} "${time_end}" - "${time_start}")
  time_hr=$(${date} -u -r "${time_exec}" '+%H:%M:%S')

  retval=0
  severity='Info'
  message='System time is synchronized.'
  ${logger} -t "${script}" "${severity}: ${message} Duration: ${time_hr}"

{% if (openntpd_monitor_prom_state is match('true|yes|enable')) %}
  update_prom "${retval}" "${time_start}" "${time_exec}"
{% endif %}

  exit "${retval}"
}

watch_and_wait_for_change() {
  watch_key="$1"
  watch_value="$2"
  watch_option="$3"
  time_step="$4"
  time_maximum="$5"
  while ${watch_key} | ${grep} ${watch_option} "${watch_value}" > /dev/null 2>&1 ; do
    log_and_exit_on_error "$?" 'Error' 'Unable to get system time status.'
    if [ "${time_initial}" -lt "${time_maximum}" ]; then
      time_initial=$(${expr} "${time_initial}" + "${time_step}")
      ${sleep} "${time_initial}"
    else
    log_and_exit_on_error "1" 'Error' 'System time is not synchronized.'
    fi
  done
}

# SCRIPT

check_script_user

create_lockfile

# Get system time status and wait while 'unsynced'
time_initial=0
watch_and_wait_for_change "${ntpctl} -s status" 'unsynced' '' '2' '32'

# Get system time offset
offset_raw=$(${ntpctl} -s peers | ${awk} '/^ \*/ {gsub(/ms/,"");print $7}')
log_and_exit_on_error "$?" 'Error' 'Unable to get system time offset.'

# Convert system time offset
offset=$(${echo} "${offset_raw}" | ${sed} -n 's@\([-0-9]*\).*@\1@p' | ${sed} 's@[-]@@g')
log_and_exit_on_error "$?" 'Error' 'Unable to convert system time offset.'

# Check system time offset
if [ -z "${offset}" ] ; then
  log_and_exit_on_error '1' 'Error' 'System time is not synchronized with any peer.'
elif [ "${offset}" -ge "${offset_limit}" ]; then
  log_and_exit_on_error '1' 'Error' "System time offset limit exceeded (${offset}/${offset_limit} ms)."
fi

remove_lockfile

log_and_exit
