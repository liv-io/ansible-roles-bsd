---

- name: 'include variables'
  include_vars: "{{lookup('first_found', params)}}"
  vars:
    params:
      files:
        - "vars/{{ansible_os_family}}{{ansible_distribution_release}}.yml"
        - "vars/{{ansible_os_family}}.yml"
        - 'vars/main.yml'
  tags:
    - squid

- name: 'file create dst_domain_allowed.acl'
  template:
    src: "{{file_src_dst_domain_allowed_acl}}"
    dest: "{{file_dst_dst_domain_allowed_acl}}"
    mode: "{{file_mode_dst_domain_allowed_acl}}"
    owner: "{{file_owner_dst_domain_allowed_acl}}"
    group: "{{file_group_dst_domain_allowed_acl}}"
  notify:
    - 'command parse config'
    - 'service restart squid'
  tags:
    - squid

- name: 'file create dst_domain_blocked.acl'
  template:
    src: "{{file_src_dst_domain_blocked_acl}}"
    dest: "{{file_dst_dst_domain_blocked_acl}}"
    mode: "{{file_mode_dst_domain_blocked_acl}}"
    owner: "{{file_owner_dst_domain_blocked_acl}}"
    group: "{{file_group_dst_domain_blocked_acl}}"
  notify:
    - 'command parse config'
    - 'service restart squid'
  tags:
    - squid

- name: 'file create dst_network_allowed.acl'
  template:
    src: "{{file_src_dst_network_allowed_acl}}"
    dest: "{{file_dst_dst_network_allowed_acl}}"
    mode: "{{file_mode_dst_network_allowed_acl}}"
    owner: "{{file_owner_dst_network_allowed_acl}}"
    group: "{{file_group_dst_network_allowed_acl}}"
  notify:
    - 'command parse config'
    - 'service restart squid'
  tags:
    - squid

- name: 'file create dst_network_blocked.acl'
  template:
    src: "{{file_src_dst_network_blocked_acl}}"
    dest: "{{file_dst_dst_network_blocked_acl}}"
    mode: "{{file_mode_dst_network_blocked_acl}}"
    owner: "{{file_owner_dst_network_blocked_acl}}"
    group: "{{file_group_dst_network_blocked_acl}}"
  notify:
    - 'command parse config'
    - 'service restart squid'
  tags:
    - squid

- name: 'file create src_network_unrestricted.acl'
  template:
    src: "{{file_src_src_network_unrestricted_acl}}"
    dest: "{{file_dst_src_network_unrestricted_acl}}"
    mode: "{{file_mode_src_network_unrestricted_acl}}"
    owner: "{{file_owner_src_network_unrestricted_acl}}"
    group: "{{file_group_src_network_unrestricted_acl}}"
  notify:
    - 'command parse config'
    - 'service restart squid'
  tags:
    - squid

- name: 'file create squid.conf'
  template:
    src: "{{file_src_squid_conf}}"
    dest: "{{file_dst_squid_conf}}"
    mode: "{{file_mode_squid_conf}}"
    owner: "{{file_owner_squid_conf}}"
    group: "{{file_group_squid_conf}}"
  no_log: 'true'
  notify:
    - 'command parse config'
    - 'service restart squid'
  tags:
    - squid

- name: 'stat file cache.dir'
  stat:
    path: "{{file_dst_cache_dir}}"
  register: register_cache_dir
  tags:
    - squid

- name: 'line enable squid_enable'
  lineinfile:
    state: 'present'
    line: "{{file_line_squid_enable}}=\"YES\" # Ansible: Enable squid"
    regexp: "^{{file_line_squid_enable}}="
    dest: "{{file_dst_squid_enable}}"
    create: 'yes'
  when: (ansible_os_family == 'FreeBSD')
  tags:
    - squid

- name: 'file create squid.cfg'
  template:
    src: "{{file_src_squid_cfg}}"
    dest: "{{file_dst_squid_cfg}}"
    mode: "{{file_mode_squid_cfg}}"
    owner: "{{file_owner_squid_cfg}}"
    group: "{{file_group_squid_cfg}}"
  notify: 'service reload monit'
  when: (squid_monitor_monit_state is match('true|yes|enable'))
  tags:
    - squid

- name: 'command create cache.dir'
  shell: "{{command_cmd_create_cache_dir}}"
  check_mode: 'no'
  when: (register_cache_dir.stat.exists == False)
  tags:
    - squid

- name: 'command status squid'
  command: "{{command_cmd_status_squid}}"
  register: register_status_squid
  changed_when: (register_status_squid.rc > 1)
  failed_when: (register_status_squid.rc > 1)
  check_mode: 'no'
  when: (ansible_os_family == 'OpenBSD')
  tags:
    - squid

- name: 'command enable squid'
  command: "{{command_cmd_enable_squid}}"
  check_mode: 'no'
  when: (ansible_os_family == 'OpenBSD') and (register_status_squid.rc == 1)
  tags:
    - squid

- name: 'command check squid'
  command: "{{command_cmd_check_squid}}"
  register: register_check_squid
  changed_when: (register_check_squid.rc > 1)
  failed_when: (register_check_squid.rc > 1)
  check_mode: 'no'
  when: (ansible_os_family == 'OpenBSD')
  tags:
    - squid

- name: 'command start squid'
  command: "{{command_cmd_start_squid}}"
  check_mode: 'no'
  when: (ansible_os_family == 'OpenBSD') and (register_check_squid.rc == 1)
  tags:
    - squid

- name: 'service start squid'
  service:
    state: 'started'
    enabled: 'yes'
    name: "{{service_name_squid}}"
  tags:
    - squid
