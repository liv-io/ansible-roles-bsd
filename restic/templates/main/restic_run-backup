#!/usr/bin/env sh

{{ansible_managed|comment(decoration='#')}}

# SHELL VARIABLES

SHELL='/bin/sh'
PATH='/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin'

# COMMANDS

which='/usr/bin/which' && [ -x ${which} ] || { echo "Error: Command 'which' not found."; exit 127; }
basename=$(${which} basename) || { echo "Error: Command 'basename' not found."; exit 127; }
date=$(${which} date) || { echo "Error: Command 'date' not found."; exit 127; }
echo=$(${which} echo) || { echo "Error: Command 'echo' not found."; exit 127; }
expr=$(${which} expr) || { echo "Error: Command 'expr' not found."; exit 127; }
hostname=$(${which} hostname) || { echo "Error: Command 'hostname' not found."; exit 127; }
logger=$(${which} logger) || { echo "Error: Command 'logger' not found."; exit 127; }
{% if (restic_monitor_mail_state is match('true|yes|enable')) %}
mailx=$(${which} mailx) || { echo "Error: Command 'mailx' not found."; exit 127; }
{% endif %}
rm=$(${which} rm) || { echo "Error: Command 'rm' not found."; exit 127; }
tr=$(${which} tr) || { echo "Error: Command 'tr' not found."; exit 127; }
touch=$(${which} touch) || { echo "Error: Command 'touch' not found."; exit 127; }
whoami=$(${which} whoami) || { echo "Error: Command 'whoami' not found."; exit 127; }

restic=$(${which} restic) || { echo "Error: Command 'restic' not found."; exit 127; }

# VARIABLES

host=$(${hostname} -s) || { echo "Error: Host name unknown."; exit 68; }
script="$(${basename} $0)[$$]" || { echo "Error: Command invoked cannot execute."; exit 126; }
date_start=$(${date} '+%Y-%m-%dT%H:%M:%S%z')
time_start=$(${date} '+%s')
user='{{file_owner_restic_run_backup}}'
lockfile='/var/tmp/restic_run-backup.lock'
retval=0
severity='Debug'
message='Please check log files for more information.'

server_username='{{restic_server_username}}'
server_password='{{restic_server_password}}'
server_address='{{restic_server_address}}'
server_port='{{restic_server_port}}'
repo="rest:https://${server_username}:${server_password}@${server_address}:${server_port}/$(${hostname} -s)"
password='{{file_dst_password_conf}}'
include='{{file_dst_include_conf}}'
exclude='{{file_dst_exclude_conf}}'
log_file='{{file_dst_restic_log}}'
{% if not (restic_cacert == '') %}
ca_file='{{restic_cacert}}'
{% endif %}
keep_hourly='{{restic_keep_hourly}}'
keep_daily='{{restic_keep_daily}}'
keep_weekly='{{restic_keep_weekly}}'
keep_monthly='{{restic_keep_monthly}}'
limit_download='{{restic_limit_download}}'
limit_upload='{{restic_limit_upload}}'
textfile_collector='{{restic_monitor_prom_textfile_collector}}'

{% if (restic_monitor_mail_state is match('true|yes|enable')) %}
mail_from_address='{{restic_monitor_mail_from_address}}'
mail_to_address='{% for item in restic_monitor_mail_to_address %}{{item}}{% if not loop.last %},{% endif %}{% endfor %}'
mail_subject='restic: Run Backup - Error ({{ansible_hostname}})'
{% endif %}

# FUNCTIONS

{% if (restic_monitor_mail_state is match('true|yes|enable')) %}
mail_error() {
  retval=$1
  severity=$2
  message=$3
  mail_body="ERROR

Message     : ${message}
Severity    : ${severity}
Date & Time : $(${date} '+%Y-%m-%dT%H:%M:%S%z')

SCRIPT

Name        : restic_run-backup
Type        : Shell script
PID         : $$

SYSTEM

Hostname    : {{ansible_hostname}}
FQDN        : {{ansible_fqdn}}"

{% if (ansible_os_family == 'FreeBSD') %}
  ${echo} "${mail_body}" | ${mailx} -s "${mail_subject}" -F "${mail_to_address}" > /dev/null 2>&1
{% else %}
  ${echo} "${mail_body}" | ${mailx} -r "${mail_from_address}" -s "${mail_subject}" "${mail_to_address}" > /dev/null 2>&1
{% endif %}
}
{% endif %}

{% if (restic_monitor_prom_state is match('true|yes|enable')) %}
update_prom() {
  retval="$1"
  time_start="$2"
  time_exec="$3"

  if [ -w "${textfile_collector}" ]; then
    ${echo} "# HELP restic_run_backup_exit The script's exit code.
# TYPE restic_run_backup_exit counter
restic_run_backup_exit ${retval}" > "${textfile_collector}/restic_run_backup_exit.prom"

    if [ -z "${time_start}" ] ; then
      ${rm} -f "${textfile_collector}/restic_run_backup_start.prom"
    else
      ${echo} "# HELP restic_run_backup_start The script's start time in epoch.
# TYPE restic_run_backup_start counter
restic_run_backup_start ${time_start}" > "${textfile_collector}/restic_run_backup_start.prom"
    fi

    if [ -z "${time_exec}" ] ; then
      ${rm} -f "${textfile_collector}/restic_run_backup_duration.prom"
    else
      ${echo} "# HELP restic_run_backup_duration The script's execution duration in seconds.
# TYPE restic_run_backup_duration counter
restic_run_backup_duration ${time_exec}" > "${textfile_collector}/restic_run_backup_duration.prom"
    fi
  fi
}
{% endif %}

check_script_user() {
  if [ "$(${whoami})" != "${user}" ]; then
    retval=77
    severity='Error'
    message="Please run script as user '${user}'"
    ${echo} "$(${date} '+%Y-%m-%dT%H:%M:%S%z') - ${host} - ${script}: "${severity}: ${message}""
    exit ${retval}
  fi
}

create_lockfile() {
  if [ ! -e ${lockfile} ]; then
    ${touch} ${lockfile} || log_and_exit_on_error "$?" 'Warning' 'Could not create lockfile. Please investigate.'
  else
    log_and_exit_on_error "$?" 'Warning' 'Lockfile does already exist. Please investigate.'
  fi
}

remove_lockfile() {
  if [ -e ${lockfile} ]; then
    ${rm} -f ${lockfile} || log_and_exit_on_error "$?" 'Warning' 'Could not remove lockfile. Please investigate.'
  else
    log_and_exit_on_error "$?" 'Warning' 'Lockfile did not exist. Please investigate.'
  fi
}

log_and_exit_on_error() {
  retval=$1
  severity=$2
  message=$3
  if [ ${retval} -ne 0 ]; then
    ${rm} -f ${lockfile}
    if [ -t 1 ] ; then
      ${echo} "$(${date} '+%Y-%m-%dT%H:%M:%S%z') - ${host} - ${script}: ${severity}: ${message}"
    fi

    ${logger} -t ${script} "${severity}: ${message}"

{% if (restic_monitor_mail_state is match('true|yes|enable')) %}
    mail_error ${retval} "${severity}" "${message}"
{% endif %}

{% if (restic_monitor_prom_state is match('true|yes|enable')) %}
    update_prom "${retval}" "${time_start}" "${time_exec}"
{% endif %}

    add_log_header 'backup failed'

    exit ${retval}
  fi
}

log_and_exit() {
  date_end=$(${date} '+%Y-%m-%dT%H:%M:%S%z')
  time_end=$(${date} '+%s')
  time_exec=$(${expr} ${time_end} - ${time_start})
  time_hr=$(${date} -u -r "${time_exec}" '+%H:%M:%S')

  retval=0
  severity='Info'
  message='Backup created successfully.'
  ${logger} -t ${script} "${severity}: ${message} Duration: ${time_hr}"

{% if (restic_monitor_prom_state is match('true|yes|enable')) %}
  update_prom "${retval}" "${time_start}" "${time_exec}"
{% endif %}

  exit ${retval}
}

add_log_header() {
  name=$1

  name_upper=$(${echo} ${name} | ${tr} '[:lower:]' '[:upper:]')
  date_time=$(${date} '+%Y-%m-%dT%H:%M:%S%z')
  echo "# ${name_upper} | ${date_time}" >> ${log_file}
}

# SCRIPT

check_script_user

create_lockfile

add_log_header 'backup started'

# Get stats and check backup repository
${restic} stats -r ${repo} -p ${password} {% if not (restic_cacert == '') %}--cacert "${ca_file}"{% endif %} > /dev/null 2>&1
if [ $? -ne 0 ]; then
  # Initialize backup repository
  ${restic} init -r ${repo} -p ${password} {% if not (restic_cacert == '') %}--cacert "${ca_file}"{% endif %} > /dev/null 2>&1
  log_and_exit_on_error "$?" 'Error' 'Unable to create backup repository.'
fi

# Create new backup
${restic} backup -r ${repo} -p ${password} --limit-download ${limit_download} --limit-upload ${limit_upload} --files-from ${include} --exclude-caches --exclude-file ${exclude} {% if not (restic_cacert == '') %}--cacert "${ca_file}"{% endif %} >> ${log_file} 2>&1
log_and_exit_on_error "$?" 'Error' 'Unable to create new backup.'

# Remove old backups
${restic} forget -r ${repo} -p ${password} --limit-download ${limit_download} --limit-upload ${limit_upload} --keep-hourly ${keep_hourly} --keep-daily ${keep_daily} --keep-weekly ${keep_weekly} --keep-monthly ${keep_monthly} --prune {% if not (restic_cacert == '') %}--cacert "${ca_file}"{% endif %} >> ${log_file} 2>&1
log_and_exit_on_error "$?" 'Error' 'Unable to remove old backups.'

# Check backup repository
${restic} check -r ${repo} -p ${password} --limit-download ${limit_download} --limit-upload ${limit_upload} --with-cache {% if not (restic_cacert == '') %}--cacert "${ca_file}"{% endif %} >> ${log_file} 2>&1
log_and_exit_on_error "$?" 'Error' 'Unable to check backup repository.'

add_log_header 'backup successful'

remove_lockfile

log_and_exit
