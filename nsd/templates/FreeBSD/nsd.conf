{{ansible_managed|comment(decoration='#')}}

#
# nsd.conf -- the NSD(8) configuration file, nsd.conf(5).
#
# Copyright (c) 2001-2011, NLnet Labs. All rights reserved.
#
# See LICENSE for the license.
#

# This is a comment.
# Sample configuration file
# include: "file" # include that file's text over here.  Globbed, "*.conf"

# SERVER

# options for the nsd server
server:
	# Number of NSD servers to fork.  Put the number of CPUs to use here.
	# server-count: 1

	# Set overall CPU affinity for NSD processes on Linux and FreeBSD.
	# Any server/xfrd CPU affinity value will be masked by this value.
	# cpu-affinity: 0 1 2 3

	# Bind NSD server(s), configured by server-count (1-based), to a
	# dedicated core. Single core affinity improves L1/L2 cache hits and
	# reduces pipeline stalls/flushes.
	#
	# server-1-cpu-affinity: 0
	# server-2-cpu-affinity: 1
	# ...
	# server-<N>-cpu-affinity: 2

	# Bind xfrd to a dedicated core.
	# xfrd-cpu-affinity: 3

	# INTERFACE

	# Specify specific interfaces to bind (default are the wildcard
	# interfaces 0.0.0.0 and ::0).
	# For servers with multiple IP addresses, list them one by one,
	# or the source address of replies could be wrong.
	# Use ip-transparent to be able to list addresses that turn on later.
	# ip-address: 1.2.3.4
	# ip-address: 1.2.3.4@5678
	# ip-address: 12fe::8ef0
	#
	# IP addresses can be configured per-server to avoid waking up more
	# than one server when a packet comes in (thundering herd problem) or
	# to partition sockets across servers to improve select/poll
	# performance.
	#
	# ip-address: 1.2.3.4       servers="1-2 3"
	# ip-address: 1.2.3.4@5678  servers="4-5 6"
	#
	# When several interfaces are configured to listen on the same subnet,
	# care must be taken to ensure responses go out the same interface the
	# corresponding query came in on to avoid problems with load balancers
	# and VLAN tagged interfaces. Linux offers the SO_BINDTODEVICE socket
	# option to bind a socket to a specified device. For FreeBSD, to
	# achieve the same result, specify the routing table to use after the
	# IP address to use SO_SETFIB.
	#
	# Complement with socket partitioning and CPU affinity for attack
	# mitigation benefits. i.e. only a single core is maxed out if a
	# specific IP address is under attack.
	#
	# ip-address: 1.2.3.4       setfib=0  bindtodevice=yes
	# ip-address: 1.2.3.5@6789  setfib=1  bindtodevice=yes

{% if not (nsd_interface == []) %}
{% for item in nsd_interface %}
{% if not ((item.comment|default('')) == '') %}
	# {{item.comment}}
{% endif %}
	interface: {{item.address}}{% if not ((item.port|default('53')) == '') %}@{{(item.port|int(53))}}{% endif %}

{% endfor %}
{% else %}
	interface: 127.0.0.1
{% endif %}

	# Allow binding to non local addresses. Default no.
	# ip-transparent: no

	# Allow binding to addresses that are down. Default no.
	# ip-freebind: no

	# Use SO_REUSEPORT socket option for performance. Default no.
	# reuseport: no

	# override maximum socket send buffer size.  Default of 0 results in
	# send buffer size being set to 1048576 (bytes).
	# send-buffer-size: 1048576

	# override maximum socket receive buffer size. Default of 0 results in
	# receive buffer size being set to 1048576 (bytes).
	# receive-buffer-size: 1048576

	# enable debug mode, does not fork daemon process into the background.
	# debug-mode: no

	# listen on IPv4 connections
{% if (nsd_ip4_state is match('false|no|disable')) %}
	do-ip4: no
{% else %}
	do-ip4: yes
{% endif %}

	# listen on IPv6 connections
{% if (nsd_ip6_state is match('true|yes|enable')) %}
	do-ip6: yes
{% else %}
	do-ip6: no
{% endif %}

	# PORT

	# port to answer queries on. default is 53.
{% if not (nsd_default_port == '') %}
	port: {{(nsd_default_port|int(53))}}
{% endif %}

	# Verbosity level.
	# verbosity: 0

	# After binding socket, drop user privileges.
	# can be a username, id or id.gid.
	# username: nsd

	# Run NSD in a chroot-jail.
	# make sure to have pidfile and database reachable from there.
	# by default, no chroot-jail is used.
	# chroot: "/usr/local/etc/nsd"

	# The directory for zonefile: files.  The daemon chdirs here.
	# zonesdir: "/usr/local/etc/nsd"

	# the list of dynamically added zones.
	# zonelistfile: "/var/db/nsd/zone.list"

	# the database to use
	# if set to "" then no disk-database is used, less memory usage.
	# database: "/var/db/nsd/nsd.db"

	# log messages to file. Default to stderr and syslog (with
	# facility LOG_DAEMON).  stderr disappears when daemon goes to bg.
	# logfile: "/var/log/nsd.log"

	# log only to syslog.
	# log-only-syslog: no

	# File to store pid for nsd in.
	# pidfile: "/var/run/nsd/nsd.pid"

	# The file where secondary zone refresh and expire timeouts are kept.
	# If you delete this file, all secondary zones are forced to be
	# 'refreshing' (as if nsd got a notify).  Set to "" to disable.
	# xfrdfile: "/var/db/nsd/xfrd.state"

	# The directory where zone transfers are stored, in a subdir of it.
	# xfrdir: "/tmp"

	# don't answer VERSION.BIND and VERSION.SERVER CHAOS class queries
{% if (nsd_hide_version is match('false|no|disable')) %}
	hide-version: no
{% else %}
	hide-version: yes
{% endif %}

	# don't answer HOSTNAME.BIND and ID.SERVER CHAOS class queries
	# hide-identity: no

	# Drop UPDATE queries
	# drop-updates: no

	# version string the server responds with for chaos queries.
	# default is 'NSD x.y.z' with the server's version number.
{% if not (nsd_version == '') %}
	version: "{{nsd_version}}"
{% endif %}

	# identify the server (CH TXT ID.SERVER entry).
{% if not (nsd_identity == '') %}
	identity: "{{nsd_identity}}"
{% endif %}

	# NSID identity (hex string, or "ascii_somestring"). default disabled.
	# nsid: "aabbccdd"

	# Maximum number of concurrent TCP connections per server.
	# tcp-count: 100

	# Accept (and immediately close) TCP connections after maximum number
	# of connections is reached to prevent kernel connection queue from
	# growing.
	# tcp-reject-overflow: no

	# Maximum number of queries served on a single TCP connection.
	# By default 0, which means no maximum.
	# tcp-query-count: 0

	# Override the default (120 seconds) TCP timeout.
	# tcp-timeout: 120

	# Maximum segment size (MSS) of TCP socket on which the server
	# responds to queries. Default is 0, system default MSS.
	# tcp-mss: 0

	# Maximum segment size (MSS) of TCP socket for outgoing AXFR request.
	# Default is 0, system default MSS.
	# outgoing-tcp-mss: 0

	# Preferred EDNS buffer size for IPv4.
	# ipv4-edns-size: 1232

	# Preferred EDNS buffer size for IPv6.
	# ipv6-edns-size: 1232

	# statistics are produced every number of seconds. Prints to log.
	# Default is 0, meaning no statistics are produced.
	# statistics: 3600

	# Number of seconds between reloads triggered by xfrd.
	# xfrd-reload-timeout: 1

	# log timestamp in ascii (y-m-d h:m:s.msec), yes is default.
	# log-time-ascii: yes

	# round robin rotation of records in the answer.
	# round-robin: no

	# minimal-responses only emits extra data for referrals.
	# minimal-responses: no

	# Do not return additional information if the apex zone of the
	# additional information is configured but does not match the apex zone
	# of the initial query.
	# confine-to-zone: no

	# refuse queries of type ANY.  For stopping floods.
	# refuse-any: no

	# check mtime of all zone files on start and sighup
	# zonefiles-check: yes

	# write changed zonefiles to disk, every N seconds.
	# default is 0(disabled) or 3600(if database is "").
	# zonefiles-write: 3600

	# RRLconfig
	# Response Rate Limiting, size of the hashtable. Default 1000000.
	# rrl-size: 1000000

	# Response Rate Limiting, maximum QPS allowed (from one query source).
	# If set to 0, ratelimiting is disabled. Also set
	# rrl-whitelist-ratelimit to 0 to disable ratelimit processing.
	# Default is on.
	# rrl-ratelimit: 200

	# Response Rate Limiting, number of packets to discard before
	# sending a SLIP response (a truncated one, allowing an honest
	# resolver to retry with TCP). Default is 2 (one half of the
	# queries will receive a SLIP response, 0 disables SLIP (all
	# packets are discarded), 1 means every request will get a
	# SLIP response.  When the ratelimit is hit the traffic is
	# divided by the rrl-slip value.
	# rrl-slip: 2

	# Response Rate Limiting, IPv4 prefix length. Addresses are
	# grouped by netblock.
	# rrl-ipv4-prefix-length: 24

	# Response Rate Limiting, IPv6 prefix length. Addresses are
	# grouped by netblock.
	# rrl-ipv6-prefix-length: 64

	# Response Rate Limiting, maximum QPS allowed (from one query source)
	# for whitelisted types. Default is on.
	# rrl-whitelist-ratelimit: 2000
	# RRLend

	# Service clients over TLS (on the TCP sockets), with plain DNS inside
	# the TLS stream. Give the certificate to use and private key.
	# Default is "" (disabled). Requires restart to take effect.
	# tls-service-key: "path/to/privatekeyfile.key"
	# tls-service-pem: "path/to/publiccertfile.pem"
	# tls-service-ocsp: "path/to/ocsp.pem"
	# tls-port: 853

# DNSTAP config section, if compiled with that
# dnstap:
	# set this to yes and set one or more of dnstap-log-..-messages to yes.
	# dnstap-enable: no
	# dnstap-socket-path: "/var/run/dnstap.sock"
	# dnstap-send-identity: no
	# dnstap-send-version: no
	# dnstap-identity: ""
	# dnstap-version: ""
	# dnstap-log-auth-query-messages: no
	# dnstap-log-auth-response-messages: no

# REMOTE CONTROL

# Remote control config section. 
remote-control:
	# Enable remote control with nsd-control(8) here.
	# set up the keys and certificates with nsd-control-setup.
{% if (nsd_control_enable is match('true|yes|enable')) %}
	control-enable: yes
{% else %}
	control-enable: no
{% endif %}

	# what interfaces are listened to for control, default is on localhost.
	# with an absolute path, a unix local named pipe is used for control
	# (and key and cert files are not needed, use directory permissions).
	# control-interface: 127.0.0.1
	# control-interface: ::1

	# port number for remote control operations (uses TLS over TCP).
	# control-port: 8952

	# nsd server key file for remote control.
	# server-key-file: "/usr/local/etc/nsd/nsd_server.key"

	# nsd server certificate file for remote control.
	# server-cert-file: "/usr/local/etc/nsd/nsd_server.pem"

	# nsd-control key file.
	# control-key-file: "/usr/local/etc/nsd/nsd_control.key"

	# nsd-control certificate file.
	# control-cert-file: "/usr/local/etc/nsd/nsd_control.pem"

# KEY

# Secret keys for TSIGs that secure zone transfers.
# You could include: "secret.keys" and put the 'key:' statements in there,
# and give that file special access control permissions.
#
# key:
	# The key name is sent to the other party, it must be the same
	#name: "keyname"
	# algorithm hmac-md5, or sha1, sha256, sha224, sha384, sha512
	#algorithm: sha256
	# secret material, must be the same as the other party uses.
	# base64 encoded random number.
	# e.g. from dd if=/dev/random of=/dev/stdout count=1 bs=32 | base64
	#secret: "K2tf3TRjvQkVCmJF3/Z9vA=="

# PATTERN

# Patterns have zone configuration and they are shared by one or more zones.
#
# pattern:
	# name by which the pattern is referred to
	#name: "myzones"
	# the zonefile for the zones that use this pattern.
	# if relative then from the zonesdir (inside the chroot).
	# the name is processed: %s - zone name (as appears in zone:name).
	# %1 - first character of zone name, %2 second, %3 third.
	# %z - topleveldomain label of zone, %y, %x next labels in name.
	# if label or character does not exist you get a dot '.'.
	# for example "%s.zone" or "zones/%1/%2/%3/%s" or "secondary/%z/%s"
	#zonefile: "%s.zone"

	# If no master and slave access control elements are provided,
	# this zone will not be served to/from other servers.

	# A master zone needs notify: and provide-xfr: lists.  A slave
	# may also allow zone transfer (for debug or other secondaries).
	# notify these slaves when the master zone changes, address TSIG|NOKEY
	# IP can be ipv4 and ipv6, with @port for a nondefault port number.
	#notify: 192.0.2.1 NOKEY
	# allow these IPs and TSIG to transfer zones, addr TSIG|NOKEY|BLOCKED
	# address range 192.0.2.0/24, 1.2.3.4&255.255.0.0, 3.0.2.20-3.0.2.40
	#provide-xfr: 192.0.2.0/24 my_tsig_key_name
	# set the number of retries for notify.
	#notify-retry: 5

	# uncomment to provide AXFR to all the world
	# provide-xfr: 0.0.0.0/0 NOKEY
	# provide-xfr: ::0/0 NOKEY

	# A slave zone needs allow-notify: and request-xfr: lists.
	#allow-notify: 2001:db8::0/64 my_tsig_key_name
	# By default, a slave will request a zone transfer with IXFR/TCP.
	# If you want to make use of IXFR/UDP use: UDP addr tsigkey
	# for a master that only speaks AXFR (like NSD) use AXFR addr tsigkey
	#request-xfr: 192.0.2.2 the_tsig_key_name
	# Attention: You cannot use UDP and AXFR together. AXFR is always over
	# TCP. If you use UDP, we higly recommend you to deploy TSIG.
	# Allow AXFR fallback if the master does not support IXFR. Default
	# is yes.
	#allow-axfr-fallback: yes
	# set local interface for sending zone transfer requests.
	# default is let the OS choose.
	#outgoing-interface: 10.0.0.10
	# limit the refresh and retry interval in seconds.
	#max-refresh-time: 2419200
	#min-refresh-time: 0
	#max-retry-time: 1209600
	#min-retry-time: 0
	# Lower bound of expire interval in seconds.  The value can be "refresh+retry+1"
	# in which case the lower bound of expire interval is the sum of the refresh and
	# retry values (limited to the bounds given with the above parameters), plus 1.
	#min-expire-time: 0

	# Slave server tries zone transfer to all masters and picks highest
	# zone version available, for when masters have different versions.
	#multi-master-check: no

	# limit the zone transfer size (in bytes), stops very large transfers
	# 0 is no limits enforced.
	# size-limit-xfr: 0

	# if compiled with --enable-zone-stats, give name of stat block for
	# this zone (or group of zones).  Output from nsd-control stats.
	# zonestats: "%s"

	# if you give another pattern name here, at this point the settings
	# from that pattern are inserted into this one (as if it were a
	# macro).  The statement can be given in between other statements,
	# because the order of access control elements can make a difference
	# (which master to request from first, which slave to notify first).
	#include-pattern: "common-masters"

# ZONE

# Fixed zone entries.  Here you can config zones that cannot be deleted.
# Zones that are dynamically added and deleted are put in the zonelist file.

{% for item in nsd_zone %}
{% if not (item.state|default('true') is match('false|no|disable')) %}
zone:
{% if not ((item.comment|default('')) == '') %}
	# {{item.comment}}
{% endif %}
	name: "{{item.name}}"
	zonefile: "{{file_dst_config}}/{{item.name}}.zone"
{% endif %}

{% endfor %}
